// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: proto/grpcserver.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ShortURL_PingDB_FullMethodName           = "/grpcserver.ShortURL/PingDB"
	ShortURL_Shorten_FullMethodName          = "/grpcserver.ShortURL/Shorten"
	ShortURL_ShortenJSON_FullMethodName      = "/grpcserver.ShortURL/ShortenJSON"
	ShortURL_ShortenBatchJSON_FullMethodName = "/grpcserver.ShortURL/ShortenBatchJSON"
	ShortURL_Expand_FullMethodName           = "/grpcserver.ShortURL/Expand"
	ShortURL_ExpandUserURLS_FullMethodName   = "/grpcserver.ShortURL/ExpandUserURLS"
	ShortURL_DeleteUserURLS_FullMethodName   = "/grpcserver.ShortURL/DeleteUserURLS"
	ShortURL_GetServerStats_FullMethodName   = "/grpcserver.ShortURL/GetServerStats"
)

// ShortURLClient is the client API for ShortURL service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShortURLClient interface {
	PingDB(ctx context.Context, in *PingDBRequest, opts ...grpc.CallOption) (*PingDBResponse, error)
	Shorten(ctx context.Context, in *ShortenRequest, opts ...grpc.CallOption) (*ShortenResponse, error)
	ShortenJSON(ctx context.Context, in *ShortenJSONRequest, opts ...grpc.CallOption) (*ShortenJSONResponse, error)
	ShortenBatchJSON(ctx context.Context, in *ShortenBatchJSONRequest, opts ...grpc.CallOption) (*ShortenBatchJSONResponse, error)
	Expand(ctx context.Context, in *ExpandRequest, opts ...grpc.CallOption) (*ExpandResponse, error)
	ExpandUserURLS(ctx context.Context, in *ExpandUserURLSRequest, opts ...grpc.CallOption) (*ExpandUserURLSResponse, error)
	DeleteUserURLS(ctx context.Context, in *DeleteUserURLSRequest, opts ...grpc.CallOption) (*DeleteUserURLSResponse, error)
	GetServerStats(ctx context.Context, in *GetServerStatsRequest, opts ...grpc.CallOption) (*GetServerStatsResponse, error)
}

type shortURLClient struct {
	cc grpc.ClientConnInterface
}

func NewShortURLClient(cc grpc.ClientConnInterface) ShortURLClient {
	return &shortURLClient{cc}
}

func (c *shortURLClient) PingDB(ctx context.Context, in *PingDBRequest, opts ...grpc.CallOption) (*PingDBResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingDBResponse)
	err := c.cc.Invoke(ctx, ShortURL_PingDB_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortURLClient) Shorten(ctx context.Context, in *ShortenRequest, opts ...grpc.CallOption) (*ShortenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShortenResponse)
	err := c.cc.Invoke(ctx, ShortURL_Shorten_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortURLClient) ShortenJSON(ctx context.Context, in *ShortenJSONRequest, opts ...grpc.CallOption) (*ShortenJSONResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShortenJSONResponse)
	err := c.cc.Invoke(ctx, ShortURL_ShortenJSON_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortURLClient) ShortenBatchJSON(ctx context.Context, in *ShortenBatchJSONRequest, opts ...grpc.CallOption) (*ShortenBatchJSONResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShortenBatchJSONResponse)
	err := c.cc.Invoke(ctx, ShortURL_ShortenBatchJSON_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortURLClient) Expand(ctx context.Context, in *ExpandRequest, opts ...grpc.CallOption) (*ExpandResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExpandResponse)
	err := c.cc.Invoke(ctx, ShortURL_Expand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortURLClient) ExpandUserURLS(ctx context.Context, in *ExpandUserURLSRequest, opts ...grpc.CallOption) (*ExpandUserURLSResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExpandUserURLSResponse)
	err := c.cc.Invoke(ctx, ShortURL_ExpandUserURLS_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortURLClient) DeleteUserURLS(ctx context.Context, in *DeleteUserURLSRequest, opts ...grpc.CallOption) (*DeleteUserURLSResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUserURLSResponse)
	err := c.cc.Invoke(ctx, ShortURL_DeleteUserURLS_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortURLClient) GetServerStats(ctx context.Context, in *GetServerStatsRequest, opts ...grpc.CallOption) (*GetServerStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetServerStatsResponse)
	err := c.cc.Invoke(ctx, ShortURL_GetServerStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortURLServer is the server API for ShortURL service.
// All implementations must embed UnimplementedShortURLServer
// for forward compatibility.
type ShortURLServer interface {
	PingDB(context.Context, *PingDBRequest) (*PingDBResponse, error)
	Shorten(context.Context, *ShortenRequest) (*ShortenResponse, error)
	ShortenJSON(context.Context, *ShortenJSONRequest) (*ShortenJSONResponse, error)
	ShortenBatchJSON(context.Context, *ShortenBatchJSONRequest) (*ShortenBatchJSONResponse, error)
	Expand(context.Context, *ExpandRequest) (*ExpandResponse, error)
	ExpandUserURLS(context.Context, *ExpandUserURLSRequest) (*ExpandUserURLSResponse, error)
	DeleteUserURLS(context.Context, *DeleteUserURLSRequest) (*DeleteUserURLSResponse, error)
	GetServerStats(context.Context, *GetServerStatsRequest) (*GetServerStatsResponse, error)
	mustEmbedUnimplementedShortURLServer()
}

// UnimplementedShortURLServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedShortURLServer struct{}

func (UnimplementedShortURLServer) PingDB(context.Context, *PingDBRequest) (*PingDBResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingDB not implemented")
}
func (UnimplementedShortURLServer) Shorten(context.Context, *ShortenRequest) (*ShortenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shorten not implemented")
}
func (UnimplementedShortURLServer) ShortenJSON(context.Context, *ShortenJSONRequest) (*ShortenJSONResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShortenJSON not implemented")
}
func (UnimplementedShortURLServer) ShortenBatchJSON(context.Context, *ShortenBatchJSONRequest) (*ShortenBatchJSONResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShortenBatchJSON not implemented")
}
func (UnimplementedShortURLServer) Expand(context.Context, *ExpandRequest) (*ExpandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Expand not implemented")
}
func (UnimplementedShortURLServer) ExpandUserURLS(context.Context, *ExpandUserURLSRequest) (*ExpandUserURLSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExpandUserURLS not implemented")
}
func (UnimplementedShortURLServer) DeleteUserURLS(context.Context, *DeleteUserURLSRequest) (*DeleteUserURLSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserURLS not implemented")
}
func (UnimplementedShortURLServer) GetServerStats(context.Context, *GetServerStatsRequest) (*GetServerStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerStats not implemented")
}
func (UnimplementedShortURLServer) mustEmbedUnimplementedShortURLServer() {}
func (UnimplementedShortURLServer) testEmbeddedByValue()                  {}

// UnsafeShortURLServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShortURLServer will
// result in compilation errors.
type UnsafeShortURLServer interface {
	mustEmbedUnimplementedShortURLServer()
}

func RegisterShortURLServer(s grpc.ServiceRegistrar, srv ShortURLServer) {
	// If the following call pancis, it indicates UnimplementedShortURLServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ShortURL_ServiceDesc, srv)
}

func _ShortURL_PingDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingDBRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortURLServer).PingDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortURL_PingDB_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortURLServer).PingDB(ctx, req.(*PingDBRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortURL_Shorten_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortURLServer).Shorten(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortURL_Shorten_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortURLServer).Shorten(ctx, req.(*ShortenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortURL_ShortenJSON_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortenJSONRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortURLServer).ShortenJSON(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortURL_ShortenJSON_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortURLServer).ShortenJSON(ctx, req.(*ShortenJSONRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortURL_ShortenBatchJSON_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortenBatchJSONRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortURLServer).ShortenBatchJSON(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortURL_ShortenBatchJSON_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortURLServer).ShortenBatchJSON(ctx, req.(*ShortenBatchJSONRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortURL_Expand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortURLServer).Expand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortURL_Expand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortURLServer).Expand(ctx, req.(*ExpandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortURL_ExpandUserURLS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpandUserURLSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortURLServer).ExpandUserURLS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortURL_ExpandUserURLS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortURLServer).ExpandUserURLS(ctx, req.(*ExpandUserURLSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortURL_DeleteUserURLS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserURLSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortURLServer).DeleteUserURLS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortURL_DeleteUserURLS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortURLServer).DeleteUserURLS(ctx, req.(*DeleteUserURLSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortURL_GetServerStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortURLServer).GetServerStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortURL_GetServerStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortURLServer).GetServerStats(ctx, req.(*GetServerStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShortURL_ServiceDesc is the grpc.ServiceDesc for ShortURL service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShortURL_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcserver.ShortURL",
	HandlerType: (*ShortURLServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PingDB",
			Handler:    _ShortURL_PingDB_Handler,
		},
		{
			MethodName: "Shorten",
			Handler:    _ShortURL_Shorten_Handler,
		},
		{
			MethodName: "ShortenJSON",
			Handler:    _ShortURL_ShortenJSON_Handler,
		},
		{
			MethodName: "ShortenBatchJSON",
			Handler:    _ShortURL_ShortenBatchJSON_Handler,
		},
		{
			MethodName: "Expand",
			Handler:    _ShortURL_Expand_Handler,
		},
		{
			MethodName: "ExpandUserURLS",
			Handler:    _ShortURL_ExpandUserURLS_Handler,
		},
		{
			MethodName: "DeleteUserURLS",
			Handler:    _ShortURL_DeleteUserURLS_Handler,
		},
		{
			MethodName: "GetServerStats",
			Handler:    _ShortURL_GetServerStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/grpcserver.proto",
}
